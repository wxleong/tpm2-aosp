From 0b8e31e16263a9b5d969c02906ba4576d5291a1f Mon Sep 17 00:00:00 2001
From: "wenxin.leong" <wenxin.leong@infineon.com>
Date: Tue, 9 Nov 2021 11:07:06 +0800
Subject: [PATCH] integrate TPM into AOSP

---
 Android.bp                     | 233 +++++++++++++++++++++++++++++++++
 config.h                       | 182 +++++++++++++++++++++++++
 dist/fapi-config.json          |  10 ++
 src/tss2-fapi/fapi_crypto.c    |   2 +-
 src/tss2-fapi/ifapi_profiles.c |   4 +-
 src/tss2-tcti/tcti-mssim.c     |   8 +-
 src/tss2-tcti/tcti-swtpm.c     |   8 +-
 src/tss2-tcti/tctildr-dl.c     |  10 +-
 src/tss2-tcti/tctildr.c        |   3 +
 src/util/io.c                  |  11 +-
 src/util/io.h                  |   2 +-
 11 files changed, 454 insertions(+), 19 deletions(-)
 create mode 100644 Android.bp
 create mode 100644 config.h
 create mode 100644 dist/fapi-config.json

diff --git a/Android.bp b/Android.bp
new file mode 100644
index 00000000..5e8b858e
--- /dev/null
+++ b/Android.bp
@@ -0,0 +1,233 @@
+// Copyright (C) 2020 The Android Open Source Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/*package {
+    default_applicable_licenses: ["external_tpm2-tss_license"],
+}*/
+
+// Added automatically by a large-scale-change
+// See: http://go/android-license-faq
+/*license {
+    name: "external_tpm2-tss_license",
+    visibility: [":__subpackages__"],
+    license_kinds: [
+        "SPDX-license-identifier-BSD",
+    ],
+    license_text: [
+        "LICENSE",
+    ],
+}*/
+
+cc_defaults {
+    name: "tpm2-tss-defaults",
+    //vendor: true,
+    //host_supported: true,
+    compile_multilib: "first",
+    cflags: [
+        //"-DPACKAGE_STRING=\"\"",
+        //"-DMAXLOGLEVEL=6",
+        //"-DBSSL", // Use OpenSSL (BoringSSL) encryption instead of gcrypt
+        //"-DTCTI_MSSIM", // Check tctildr-nodl.c
+        //"-DSYSCONFDIR=\"/vendor/etc\"", // to find ./tpm2-tss/fapi-config.json
+        "-DHAVE_CONFIG_H",
+    ],
+    export_include_dirs: [
+        "include",
+    ],
+    shared_libs: [
+        "liblog",
+    ],
+}
+
+cc_library {
+    name: "tpm2-tss2-fapi",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/tss2-fapi/api/*.c",
+        "src/tss2-fapi/*.c",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/tss2-fapi",
+    ],
+    shared_libs: [
+        "openssl-libcrypto",
+        "libcurl",
+        "libjson-c",
+        "tpm2-tss2-mu",
+        "tpm2-tss2-tcti",
+        "tpm2-tss2-esys",
+        "tpm2-tss2-sys",
+        "tpm2-tss2-util",
+    ],
+}
+
+cc_library {
+    name: "tpm2-tss2-esys",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/tss2-esys/api/*.c",
+        "src/tss2-esys/esys_context.c",
+        "src/tss2-esys/esys_crypto.c",
+        "src/tss2-esys/esys_crypto_ossl.c",
+        "src/tss2-esys/esys_free.c",
+        "src/tss2-esys/esys_iutil.c",
+        "src/tss2-esys/esys_mu.c",
+        "src/tss2-esys/esys_tr.c",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/tss2-esys",
+    ],
+    shared_libs: [
+        "openssl-libcrypto",
+        "tpm2-tss2-mu",
+        "tpm2-tss2-tcti",
+        "tpm2-tss2-sys",
+        "tpm2-tss2-util",
+    ],
+}
+
+cc_library {
+    name: "tpm2-tss2-sys",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/tss2-sys/*.c",
+        "src/tss2-sys/api/*.c",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/tss2-sys",
+        "src/tss2-sys/api",
+    ],
+    shared_libs: [
+        "tpm2-tss2-mu",
+        "tpm2-tss2-util",
+    ],
+}
+
+cc_library {
+    name: "tpm2-tss2-mu",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/tss2-mu/*.c",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/tss2-mu",
+    ],
+    shared_libs: [
+        "tpm2-tss2-util",
+    ],
+}
+
+cc_library {
+    name: "tpm2-tss2-util",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/util/*.c",
+        "src/util/*.cpp",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/util",
+    ],
+    shared_libs: [
+        "libbase",
+    ],
+}
+
+cc_library {
+    name: "tpm2-tss2-tcti",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/tss2-tcti/tctildr.c",
+        "src/tss2-tcti/tctildr-dl.c",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/tss2-tcti",
+    ],
+    shared_libs: [
+        "tpm2-tss2-mu",
+        "tpm2-tss2-util",
+    ],
+}
+
+cc_library {
+    name: "libtss2-tcti-mssim",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/tss2-tcti/tcti-common.c",
+        "src/tss2-tcti/tcti-mssim.c",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/tss2-tcti",
+    ],
+    shared_libs: [
+        "tpm2-tss2-mu",
+        "tpm2-tss2-util",
+    ],
+}
+
+cc_library {
+    name: "libtss2-tcti-device",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/tss2-tcti/tcti-common.c",
+        "src/tss2-tcti/tcti-device.c",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/tss2-tcti",
+    ],
+    shared_libs: [
+        "tpm2-tss2-mu",
+        "tpm2-tss2-util",
+    ],
+}
+
+cc_library {
+    name: "tpm2-tss2-rc",
+    defaults: [ "tpm2-tss-defaults" ],
+    srcs: [
+        "src/tss2-rc/*.c",
+    ],
+    local_include_dirs: [
+        ".",
+        "include/tss2",
+        "src",
+        "src/tss2-rc",
+    ],
+    shared_libs: [
+        "tpm2-tss2-sys",
+    ],
+}
diff --git a/config.h b/config.h
new file mode 100644
index 00000000..13cf7fbf
--- /dev/null
+++ b/config.h
@@ -0,0 +1,182 @@
+#ifndef CONFIG_H
+#define CONFIG_H
+/* config.h.  Generated from config.h.in by configure.  */
+/* config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* DISABLE WEAK CRYPTO ALGORITHMS */
+/* #undef DISABLE_WEAK_CRYPTO */
+
+/* "The default TCTIs configuration string" */
+/* #undef ESYS_TCTI_DEFAULT_CONFIG */
+
+/* "The default TCTI library file" */
+/* #undef ESYS_TCTI_DEFAULT_MODULE */
+
+/* Perform integration tests without EK certificate verification */
+#define FAPI_TEST_EK_CERT_LESS 1
+
+/* Define to 1 if you have the declaration of `cygwin_conv_path', and to 0 if
+   you don't. */
+/* #undef HAVE_DECL_CYGWIN_CONV_PATH */
+
+/* Define if you have the GNU dld library. */
+/* #undef HAVE_DLD */
+
+/* Define to 1 if you have the `dlerror' function. */
+#define HAVE_DLERROR 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#define HAVE_DLFCN_H 1
+
+/* Define if you have the _dyld_func_lookup function. */
+/* #undef HAVE_DYLD */
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#define HAVE_INTTYPES_H 1
+
+/* Define if you have the libdl library or equivalent. */
+#define HAVE_LIBDL 1
+
+/* Define if libdlloader will be built on this platform */
+#define HAVE_LIBDLLOADER 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `reallocarray' function. */
+/* #define HAVE_REALLOCARRAY 1 */ // not supported in AOSP build
+
+/* Define if you have the shl_load function. */
+/* #undef HAVE_SHL_LOAD */
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#define HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#define HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#define HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#define HAVE_STRING_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#define HAVE_UNISTD_H 1
+
+/* use mssim TCTI for integration tests */
+/* #undef INTEGRATION_TCTI_MSSIM */
+
+/* Support for writing to a log file is enabled */
+#define LOG_FILE_ENABLED 1
+
+/* Define to the sub-directory where libtool stores uninstalled libraries. */
+#define LT_OBJDIR ".libs/"
+
+/* "Trace log level" */
+#define MAXLOGLEVEL 6
+
+/* mbedTLS cryptographic backend */
+/* #undef MBED */
+
+/* Define if debugging is disabled */
+/* #define NDEBUG */ // directly inserted in command line by aosp build
+
+/* disable use of dlopen */
+/* #undef NO_DL */
+
+/* OpenSSL cryptographic backend */
+#define OSSL 1
+
+/* Name of package */
+#define PACKAGE "tpm2-tss"
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "https://github.com/tpm2-software/tpm2-tss/issues"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "tpm2-tss"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "tpm2-tss 3.1.0"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "tpm2-tss"
+
+/* Define to the home page for this package. */
+#define PACKAGE_URL "https://github.com/tpm2-software/tpm2-tss"
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "3.1.0"
+
+/* Allow usage of self generated root certificate */
+/* #undef SELF_GENERATED_CERTIFICATE */
+
+/* Define to 1 if you have the ANSI C header files. */
+#define STDC_HEADERS 1
+
+/* System config dir */
+#define SYSCONFDIR "/vendor/etc"
+
+/* TCTI FOR COMMAND BASED ACCESS TO TPM2 DEVICE */
+/* #define TCTI_CMD 1 */
+
+/* TCTI FOR DEV TPM */
+/* #define TCTI_DEVICE 1 */
+
+/* TCTI FOR FUZZING */
+/* #undef TCTI_FUZZING */
+
+/* TCTI FOR MS SIMULATOR */
+/* #define TCTI_MSSIM 1 */
+
+/* TCTI FOR SWTPM */
+/* #define TCTI_SWTPM 1 */
+
+/* FAPI forced async spinning */
+/* #undef TEST_FAPI_ASYNC */
+
+/* Enable for UNIT testing */
+/* #undef UNIT */
+
+/* Enable extensions on AIX 3, Interix.  */
+#ifndef _ALL_SOURCE
+# define _ALL_SOURCE 1
+#endif
+/* Enable GNU extensions on systems that have them.  */
+#ifndef _GNU_SOURCE
+# define _GNU_SOURCE 1
+#endif
+/* Enable threading extensions on Solaris.  */
+#ifndef _POSIX_PTHREAD_SEMANTICS
+# define _POSIX_PTHREAD_SEMANTICS 1
+#endif
+/* Enable extensions on HP NonStop.  */
+#ifndef _TANDEM_SOURCE
+# define _TANDEM_SOURCE 1
+#endif
+/* Enable general extensions on Solaris.  */
+#ifndef __EXTENSIONS__
+# define __EXTENSIONS__ 1
+#endif
+
+
+/* Version number of package */
+#define VERSION "3.1.0"
+
+/* Define to 1 if on MINIX. */
+/* #undef _MINIX */
+
+/* Define to 2 if the system does not provide POSIX.1 features except with
+   this defined. */
+/* #undef _POSIX_1_SOURCE */
+
+/* Define to 1 if you need to in order for `stat' and other things to work. */
+/* #undef _POSIX_SOURCE */
+#endif
diff --git a/dist/fapi-config.json b/dist/fapi-config.json
new file mode 100644
index 00000000..bf1b671d
--- /dev/null
+++ b/dist/fapi-config.json
@@ -0,0 +1,10 @@
+{
+     "profile_name": "P_ECCP256SHA256",
+     "profile_dir": "/vendor/etc/tpm2-tss/fapi-profiles/",
+     "user_dir": "/data/tpm2-tss/user/keystore",
+     "system_dir": "/data/tpm2-tss/system/keystore",
+     "tcti": "",
+     "system_pcrs" : [],
+     "log_dir" : "/data/tpm2-tss/eventlog/",
+     "ek_cert_less": "yes"
+}
diff --git a/src/tss2-fapi/fapi_crypto.c b/src/tss2-fapi/fapi_crypto.c
index e2bc9fce..bf7af436 100644
--- a/src/tss2-fapi/fapi_crypto.c
+++ b/src/tss2-fapi/fapi_crypto.c
@@ -100,7 +100,7 @@ static const TPM2B_PUBLIC templateRsaSign = {
         .objectAttributes = ( TPMA_OBJECT_SIGN_ENCRYPT ),
         .authPolicy = {
             .size = 0,
-            .buffer = 0,
+            .buffer = {},
         },
         .parameters.rsaDetail = {
             .symmetric = {
diff --git a/src/tss2-fapi/ifapi_profiles.c b/src/tss2-fapi/ifapi_profiles.c
index 64a6680d..fa850fdd 100644
--- a/src/tss2-fapi/ifapi_profiles.c
+++ b/src/tss2-fapi/ifapi_profiles.c
@@ -256,12 +256,12 @@ ifapi_profiles_get(
     }
 
     /* Search for path delimiter */
-    split = index(name, IFAPI_FILE_DELIM_CHAR);
+    split = strchr(name, IFAPI_FILE_DELIM_CHAR); // replace index() with strchr(), https://pubs.opengroup.org/onlinepubs/000095399/functions/index.html
 
     /* If the path beging with delimiters, skip over those */
     if (name == split) {
         name += 1;
-        split = index(name, IFAPI_FILE_DELIM_CHAR);
+        split = strchr(name, IFAPI_FILE_DELIM_CHAR); // replace index() with strchr(), https://pubs.opengroup.org/onlinepubs/000095399/functions/index.html
     }
     if (split == NULL)
         len = strlen(name);
diff --git a/src/tss2-tcti/tcti-mssim.c b/src/tss2-tcti/tcti-mssim.c
index b8b61408..107c9950 100644
--- a/src/tss2-tcti/tcti-mssim.c
+++ b/src/tss2-tcti/tcti-mssim.c
@@ -305,8 +305,8 @@ tcti_mssim_finalize(
     }
     send_sim_session_end (tcti_mssim->platform_sock);
     send_sim_session_end (tcti_mssim->tpm_sock);
-    socket_close (&tcti_mssim->platform_sock);
-    socket_close (&tcti_mssim->tpm_sock);
+    socket_close2 (&tcti_mssim->platform_sock);
+    socket_close2 (&tcti_mssim->tpm_sock);
 }
 
 TSS2_RC
@@ -635,8 +635,8 @@ fail_out:
     if (conf_copy != NULL) {
         free (conf_copy);
     }
-    socket_close (&tcti_mssim->tpm_sock);
-    socket_close (&tcti_mssim->platform_sock);
+    socket_close2 (&tcti_mssim->tpm_sock);
+    socket_close2 (&tcti_mssim->platform_sock);
 
     return rc;
 }
diff --git a/src/tss2-tcti/tcti-swtpm.c b/src/tss2-tcti/tcti-swtpm.c
index 46a5106a..1362156b 100644
--- a/src/tss2-tcti/tcti-swtpm.c
+++ b/src/tss2-tcti/tcti-swtpm.c
@@ -227,7 +227,7 @@ TSS2_RC tcti_control_command (
     rc = TSS2_RC_SUCCESS;
 
 out:
-    socket_close(&tcti_swtpm->ctrl_sock);
+    socket_close2(&tcti_swtpm->ctrl_sock);
     return rc;
 }
 
@@ -357,7 +357,7 @@ tcti_swtpm_finalize(
         return;
     }
 
-    socket_close (&tcti_swtpm->tpm_sock);
+    socket_close2 (&tcti_swtpm->tpm_sock);
     free (tcti_swtpm->conf_copy);
 }
 
@@ -451,7 +451,7 @@ tcti_swtpm_receive (
      * another command is sent to the TPM.
      */
 out:
-    socket_close (&tcti_swtpm->tpm_sock);
+    socket_close2 (&tcti_swtpm->tpm_sock);
 
     tcti_common->header.size = 0;
     tcti_common->state = TCTI_STATE_TRANSMIT;
@@ -586,7 +586,7 @@ Tss2_Tcti_Swtpm_Init (
     rc = socket_connect (tcti_swtpm->swtpm_conf.host,
                          tcti_swtpm->swtpm_conf.port,
                          &tcti_swtpm->tpm_sock);
-    socket_close (&tcti_swtpm->tpm_sock);
+    socket_close2 (&tcti_swtpm->tpm_sock);
     if (rc != TSS2_RC_SUCCESS) {
         LOG_ERROR ("Cannot connect to swtpm TPM socket");
         goto fail_out;
diff --git a/src/tss2-tcti/tctildr-dl.c b/src/tss2-tcti/tctildr-dl.c
index b364695c..aa42b6ff 100644
--- a/src/tss2-tcti/tctildr-dl.c
+++ b/src/tss2-tcti/tctildr-dl.c
@@ -35,25 +35,25 @@ struct {
         .description = "Access libtss2-tcti-default.so",
     },
     {
-        .file = "libtss2-tcti-tabrmd.so.0",
+        .file = "libtss2-tcti-tabrmd.so",
         .description = "Access libtss2-tcti-tabrmd.so",
     },
     {
-        .file = "libtss2-tcti-device.so.0",
+        .file = "libtss2-tcti-device.so",
         .conf = "/dev/tpmrm0",
         .description = "Access libtss2-tcti-device.so.0 with /dev/tpmrm0",
     },
     {
-        .file = "libtss2-tcti-device.so.0",
+        .file = "libtss2-tcti-device.so",
         .conf = "/dev/tpm0",
         .description = "Access libtss2-tcti-device.so.0 with /dev/tpm0",
     },
     {
-        .file = "libtss2-tcti-swtpm.so.0",
+        .file = "libtss2-tcti-swtpm.so",
         .description = "Access to libtss2-tcti-swtpm.so",
     },
     {
-        .file = "libtss2-tcti-mssim.so.0",
+        .file = "libtss2-tcti-mssim.so",
         .description = "Access to libtss2-tcti-mssim.so",
     },
 };
diff --git a/src/tss2-tcti/tctildr.c b/src/tss2-tcti/tctildr.c
index f72530f9..ff2c0c95 100644
--- a/src/tss2-tcti/tctildr.c
+++ b/src/tss2-tcti/tctildr.c
@@ -294,6 +294,9 @@ Tss2_TctiLdr_Finalize (TSS2_TCTI_CONTEXT **tctiContext)
     }
     tctildr_finalize (*tctiContext);
     tctildr_finalize_data (&ldr_ctx->library_handle);
+    /* To prevent double free, nullify the magic number (TCTILDR_MAGIC) in memory.
+       Tss2_TctiLdr_Finalize() will not proceed without a valid magic. */
+    memset(ldr_ctx, 0, sizeof (TSS2_TCTILDR_CONTEXT));
     free (ldr_ctx);
     *tctiContext = NULL;
 }
diff --git a/src/util/io.c b/src/util/io.c
index c7f4c16f..cddfa435 100644
--- a/src/util/io.c
+++ b/src/util/io.c
@@ -144,8 +144,15 @@ socket_xmit_buf (
     return TSS2_RC_SUCCESS;
 }
 
+/**
+ * "socket_close" symbol mis-linked to system/core/libcutils/sockets_unix.cpp
+ * for unknown reason linker prioritize libcutils over this library, even when libcutils
+ * is not included in the Android.bp...
+ *
+ * Workaround is to rename the method to anything else other than "socket_close"
+ */
 TSS2_RC
-socket_close (
+socket_close2 (
     SOCKET *socket)
 {
     int ret;
@@ -241,7 +248,7 @@ socket_connect (
         LOG_DEBUG ("Attempting TCP connection to host %s, port %s", h, port_str);
         if (connect (*sock, p->ai_addr, p->ai_addrlen) != SOCKET_ERROR)
             break; /* socket connected OK */
-        socket_close (sock);
+        socket_close2 (sock);
     }
     freeaddrinfo (retp);
     if (p == NULL) {
diff --git a/src/util/io.h b/src/util/io.h
index d19954fa..6b829c47 100644
--- a/src/util/io.h
+++ b/src/util/io.h
@@ -81,7 +81,7 @@ socket_connect (
     uint16_t port,
     SOCKET *socket);
 TSS2_RC
-socket_close (
+socket_close2 (
     SOCKET *socket);
 TSS2_RC
 socket_set_nonblock (
-- 
2.25.1

